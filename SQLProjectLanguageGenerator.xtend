/*
 * generated by Xtext 2.24.0
 */
package org.xtext.example.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.example.sQLProjectLanguage.SQLSystem
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.xmi.impl.XMLResourceImpl
import org.eclipse.emf.ecore.util.EcoreUtil
import org.xtext.example.sQLProjectLanguage.Add
import org.xtext.example.sQLProjectLanguage.Attribute
import java.util.ArrayList
import org.xtext.example.sQLProjectLanguage.Remove
import org.xtext.example.sQLProjectLanguage.Select
import org.xtext.example.sQLProjectLanguage.Relationship



import java.util.List
import org.xtext.example.sQLProjectLanguage.MathExp
import org.xtext.example.sQLProjectLanguage.Expresion
import org.xtext.example.sQLProjectLanguage.Numbers
import org.xtext.example.sQLProjectLanguage.Plus
import org.xtext.example.sQLProjectLanguage.Minus
import org.xtext.example.sQLProjectLanguage.Mult
import org.xtext.example.sQLProjectLanguage.Div
import org.xtext.example.sQLProjectLanguage.Parenthesis
import org.xtext.example.sQLProjectLanguage.PrimaryKey
import org.xtext.example.sQLProjectLanguage.PrimStringAndOr
import org.xtext.example.sQLProjectLanguage.AttStringAndOr
import org.xtext.example.sQLProjectLanguage.AttLogicalExpAndOr
import org.xtext.example.sQLProjectLanguage.PrimLogicalExpAndOr

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class SQLProjectLanguageGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
	val SQLSystem modelInstance = resource.allContents.filter(SQLSystem).next
		//modelInstance.display
		
		val addList = new ArrayList<Add> 
		addList.addAll(modelInstance.operation.filter(Add))
		
		val removeList = new ArrayList<Remove> 
		removeList.addAll(modelInstance.operation.filter(Remove))
		
		val selectList = new ArrayList<Select> 
		selectList.addAll(modelInstance.operation.filter(Select))
		
		val relationshipList = new ArrayList<Relationship> 
		relationshipList.addAll(modelInstance.operation.filter(Relationship))
		
		val tg = resource.allContents.filter(MathExp)
		
		while(tg.hasNext){
			
				System::out.println(tg.next.generate)
		}
		
	
		
		
		
	//	System::out.println("Generates: "+tg.generate)
		
		
		
		generateEntityFile(modelInstance, modelInstance.name,modelInstance.value,fsa, addList, removeList,selectList, relationshipList)
		
		
		
	   
		
	}
	
		def generateEntityFile(SQLSystem sqlsystem,String systemName, String url, IFileSystemAccess2 fsa, ArrayList<Add> addList, ArrayList<Remove> removeList, ArrayList<Select> selectList, ArrayList<Relationship> relationshipList) {
		fsa.generateFile(systemName.toFirstLower+"/db.java", generateEntity(systemName, url, addList, removeList,selectList,relationshipList))
		
		System::out.println(systemName.toFirstLower+"/db.java")
	}
	
	
	def CharSequence generateEntity(String systemName, String url, ArrayList<Add> addList, ArrayList<Remove> removeList, ArrayList<Select> selectList, ArrayList<Relationship> relationshipList) '''
	package «systemName.toFirstLower»;
	import java.sql.Connection;
	import java.sql.DatabaseMetaData;
	import java.sql.DriverManager;
	import java.sql.ResultSet;
	import java.sql.SQLException;
	import java.sql.Statement;
	
	public class db {
	
	private String url = "«url»" ;
	private String username;
	private String password;
	Connection db = null;
	
	
	«generateConstructor()»
	
	
	«FOR a:addList» 
	«generateAddStatement(a)»
	 «ENDFOR»
	 
	«FOR a:selectList» 
		«generateSelectStament(a,addList)»
    «ENDFOR»

	«FOR a:removeList» 
		«generateRemoveStatement(a)»
		 «ENDFOR»

	
	 «FOR a:relationshipList» 
	 		«generateRelationshipStament(a)»
	 		 «ENDFOR» 
	}
	'''
	

	
	def generateAddStatement(Add entity) '''
	 public void add«entity.name»(«IF entity.primeryKey !== null»«entity.primeryKey.type» «entity.primeryKey.name», «ENDIF»«FOR a:entity.attributes SEPARATOR ", "»«a.type» «a.name»«ENDFOR»){
	 	try {
	 	      Statement st = db.createStatement();
	 	      DatabaseMetaData dbm = db.getMetaData();
	 	      ResultSet tables = dbm.getTables(null, null, "«entity.name»", null);
	 	       if(tables.next()){
	 	         
	 	        }else{
	 	          ResultSet rs = st.executeQuery("CREATE TABLE «entity.name» («IF entity.primeryKey !== null» «entity.primeryKey.name» «IF entity.primeryKey.type == "String"» varchar(255) «ELSE» int «ENDIF» , «ENDIF»«FOR a:entity.attributes SEPARATOR ", "»«a.name» «IF a.type == "String"» varchar(255) «ELSE» int «ENDIF» «ENDFOR» «IF entity.primeryKey!= null», PRIMARY KEY(«entity.primeryKey.name»)«ENDIF»);");  
	 	            }
	 	            st.close();
	 	            //st2.close();
	 	            }
	 	        catch (java.sql.SQLException e) {
	 	            System.out.println(e.getMessage());
	 	        }try {
	 	            Statement st = db.createStatement();
	 	            «addIfStatement(entity)»
	 	            ResultSet rs2 = st.executeQuery("INSERT INTO «entity.name»(«addInsertInto(entity)»
	 	            rs2.close();
	 	            st.close();
	 	             «IF (entity.primeryKey !== null && entity.primeryKey.requirement1 !== null) || checkForNull(entity) == true»}«ENDIF»
	 	            }
	 	        catch (java.sql.SQLException e) {
	 	            System.out.println(e.getMessage());
	 	        } 
	 	
	 }
	 
	 '''
	 
	def addInsertInto(Add entity){
		var str = "";
		if(entity.primeryKey !== null && checkForNull(entity) == false){
			str = str + entity.primeryKey.name + " , "
		}
		if(entity.primeryKey !== null && checkForNull(entity) == true){
			str = str + entity.primeryKey.name
		}
		if(checkForNull(entity) == false){
			for(i: 0 ..< entity.attributes.size){
				str = str+ entity.attributes.get(i).name
				if(i<entity.attributes.size-1){
					str = str+" , "
				}
			}
		}
		str = str + ")VALUES("
		if(entity.primeryKey !== null){
			if(entity.primeryKey.type == "String"){
				str = str + "'"+entity.primeryKey.name+"'" 
				if(checkForNull(entity)== false){
					str = str + " , "
				}
			}else{
				str = str+entity.primeryKey.name
				if(checkForNull(entity) == false){
					str = str + " , "
				}
			}
		}
		if(checkForNull(entity)== false){
			for(i: 0 ..< entity.attributes.size){
				if(entity.attributes.get(i).type == "String"){
					str = str+ "'"+entity.attributes.get(i).name+"'"
				}else{
					str = str+entity.attributes.get(i).name
				}
			
			if(i<entity.attributes.size-1){
				str = str+" , "
				}
			}
		}
		
		str = str + ");\");"
		
		str
	} 
	 
     
	def addIfStatement(Add entity){
		var str = "";
		if(entity.primeryKey !== null && (entity.primeryKey.requirement1 !== null || entity.primeryKey.str !== null) || checkForNull(entity) == true){
			str ="if("
			if(entity.primeryKey !== null){
				if(entity.primeryKey.requirement1 !== null){
				str = str + givePrimieryKeyAndMath(entity.primeryKey,entity)	
				if(entity.primeryKey.mathAndOr != null){
					for(PrimLogicalExpAndOr a : entity.primeryKey.mathAndOr){
						if(a.andOr.type == "and"){
							str = str + " && "+ a.att.name + " "+ a.math.op.type+ " "+ a.math.right.generate
						}else{
							str = str + " || "+ a.att.name + " "+ a.math.op.type+ " "+ a.math.right.generate
						}
					}
					
				}
				
				}
				
			}
			if(entity.primeryKey !== null){
				if(entity.primeryKey.strRequirement !== null){
					str = str + givePrimieryKeyAndString(entity.primeryKey,entity)
					if(entity.primeryKey.primString !== null){
						for(PrimStringAndOr a : entity.primeryKey.primString){
							if(a.andOr.type == "and"){
								str = str + " && "+ a.prim.name+ " "+a.strOP.type+ " \""+ a.str+"\""
							}else{
								str = str + " || "+ a.prim.name+ " "+a.strOP.type+ " \""+ a.str+"\""
							}
					 }
				   }
				}
				
			}
			if(checkForNull(entity) == true){
				if(entity.primeryKey !== null && (entity.primeryKey.requirement1 != null || entity.primeryKey.str !=null) ){
				str = str +" && "+displayAllRequere(entity.attributes)	
				}else{
					str = str +displayAllRequere(entity.attributes)
				}
				
			}
		
			
			str = str + "){"
			
		}
		
		
	}
	 
	def givePrimieryKeyAndMath(PrimaryKey entity, Add addEntity){
		
		var str = entity.name +" "+ entity.requirement1.op.type+ " "+ entity.requirement1.right.generate
		
		str
	}
	
	def givePrimieryKeyAndString(PrimaryKey entity, Add addEntity){		
		var str = entity.name+" "+entity.stringOP.type+" \""+ entity.str+"\""
		str=str+""
		str
	}
	 
	def displayAllRequere(List<Attribute> entity){
		var str = ""
		for(i: 0 ..< entity.size){
			if(entity.get(i).requirement1 !== null ){
				str = str + entity.get(i).name+" "+ entity.get(i).requirement1.op.type +" "+entity.get(i).requirement1.right.generate +  " && "
				if( (str.substring(str.length - 4, str.length) == " && ")){
						str = str.substring(0,str.length - 4)
						}
					for(AttLogicalExpAndOr a : entity.get(i).mathAndOr){
						if(a.andOr.type == "and"){
							str = str + " && "+ a.att.name + " "+ a.math.op.type+ " "+ a.math.right.generate
						}if(a.andOr.type == "or"){
							str = str + " || "+a.att.name + " "+ a.math.op.type+ " "+ a.math.right.generate
						}
					
						
					}
						str = str + " && " 	
					
			}
			if(entity.get(i).str !== null){
				str = str + entity.get(i).name+" "+entity.get(i).stringOP.type+" \""+entity.get(i).str+"\"" +" && "
				if(entity.get(i).attString !== null){
					if( (str.substring(str.length - 4, str.length) == " && ")){
						str = str.substring(0,str.length - 4)
						}
					for(AttStringAndOr a : entity.get(i).attString){
						if(a.andOr.type == "and"){
								str = str + " && "+ a.att.name+ " "+a.strOp.type+ " \""+ a.str+"\""
							}else{
								str = str + " || "+ a.att.name+ " "+a.strOp.type+ " \""+ a.str+"\""
							}
							
							
					}
					str = str + " && "
				}
			} 
			
		}
		if( str.substring(str.length - 4, str.length) == " && " ){
			str = str.substring(0,str.length - 4)
		}
		str
	}
	
	
	
	
	def generateRemoveStatement(Remove entity)'''
	
	 public void remove«entity.name»(«showAllNoneRequere(entity.attributes)»){
	        try {
	            
	            Statement st = db.createStatement();
	            ResultSet rs = st.executeQuery("Delete FROM «entity.table.table.name» WHERE «FOR a:entity.attributes SEPARATOR " and "»«IF a.requirement1 !== null || a.str !== null»«displayAllSelectRequere(a)»«ELSE»«a.name» «IF a.type == "String"» ='"+«a.name»+"' «ELSE» ="+«a.name»+" «ENDIF»«ENDIF»«ENDFOR»" );
	          
	            rs.close();
	            st.close();
	            }
	        catch (java.sql.SQLException e) {
	            System.out.println(e.getMessage());
	        }
	    }
	    
	'''
	
	def checkForNull(Add entity){
		var test = false
		for(Attribute a : entity.attributes){
			if(a.requirement1 !== null){
				test = true
			}
		}
		test
	} 
	
	
	def showAllNoneRequere(List<Attribute> entity){
		var str ="" 
		for(i: 0 ..< entity.size){
			if(entity.get(i).requirement1 == null && entity.get(i).str == null ){
				str = str + entity.get(i).type+ " "+ entity.get(i).name+ " , "
			}
			
			
		}
		if(str.length > 0 )
		if(str.substring(str.length - 3, str.length) == " , " ){
			str = str.substring(0,str.length - 3)
		}
		str
		
	}
	
	
	
	def generateSelectStament(Select entity,List<Add> addEntity)'''
	 public void select«entity.name»(«showAllNoneRequere(entity.attributes)»){
	        try {
	            Statement st = db.createStatement();
	            ResultSet rs = st.executeQuery("SELECT * FROM «entity.table.table.name» WHERE «FOR a:entity.attributes SEPARATOR " and "»«IF a.requirement1 !== null || a.str !== null»«displayAllSelectRequere(a)»«ELSE»«a.name» «IF a.type == "String"» ='"+«a.name»+"' «ELSE» ="+«a.name»+" «ENDIF» «ENDIF»  «ENDFOR»");
	
	            while (rs.next()) {
	 			  «var n = 1»
	              «FOR add: addEntity»
	              «IF add.name.equals(entity.table.table.name)»
	              «IF add.primeryKey != null»
	              System.out.print("«add.primeryKey.name» returned ");
	              System.out.println(rs.getString(«n»));
	              //«n = n+1»
	              «ENDIF»
	              «FOR a : add.attributes»
	              System.out.print("«a.name» returned ");
	              System.out.println(rs.getString(«n»));
	              //«n = n+1»
	              «ENDFOR»
	              «ENDIF»
	              «ENDFOR»
	            }
	            rs.close();
	            st.close();
	            }
	        catch (java.sql.SQLException e) {
	            System.out.println(e.getMessage());
	        }
	    }
	    
	'''
		def desplayAllSelectAndRequereAndOr(Attribute entity){
			var str = "";
			if(entity.requirement1 != null){
				if(entity.mathAndOr != null){
					for(AttLogicalExpAndOr a : entity.mathAndOr){
					 str = str + a.andOr.type + " "+ a.att.name+ " "+a.math.op.type+ " "+ a.math.right.generate + " "
					}
					
				}
			}
			str
		}
	
	
	
		def displayAllSelectRequere(Attribute entity){
		var str = ""
		if(entity.requirement1!= null){
		str = str+ entity.name +" "+entity.requirement1.op.type +" "+entity.requirement1.right.generate+ " " + desplayAllSelectAndRequereAndOr(entity)
		}
		if(entity.str != null){
			if(entity.stringOP.type == "==")
			str = str + entity.name+ " = '"+entity.str+"' "
			else{
				str = str + entity.name+ " "+entity.stringOP.type+" '"+entity.str+"' "
			}
			if(entity.attString != null){
				for(AttStringAndOr a : entity.attString){
					if(a.strOp.type == "=="){
						str = str + a.andOr.type+ " "+ a.att.name + " = '"+ a.str+"' "
					}else{
						str = str + a.andOr.type+ " "+a.att.name + " "+ a.strOp.type +" '"+ a.str+"' "
					}
				}
			}
		}
		str
		}
		
		
		
		
	
	
	def generateRelationshipStament(Relationship entity)'''
	    public void relationship«entity.name»(«FOR a:entity.foreignkey SEPARATOR ", "»«a.type» «a.name»«ENDFOR»){
	            try {
	                Statement st = db.createStatement();
	                DatabaseMetaData dbm = db.getMetaData();
	                ResultSet tables = dbm.getTables(null, null,"«entity.name»" , null);
	                if(tables.next()){
	                    
	                }else{
	                 ResultSet rs = st.executeQuery("CREATE TABLE «entity.name»(«FOR a:entity.foreignkey SEPARATOR ", "»«a.name»«IF a.type == "String"» varchar(255)«ELSE» int«ENDIF»«ENDFOR» ,«FOR a:entity.foreignkey SEPARATOR ", "» FOREIGN KEY(«a.name») REFERENCES «a.overType.name» («a.name»)«ENDFOR»);");
	                           
	                }
	                
	                st.close();
	                //st2.close();
	                }
	            catch (java.sql.SQLException e) {
	                System.out.println(e.getMessage());
	            }try {
	                Statement st = db.createStatement();
	                ResultSet rs2 = st.executeQuery("INSERT INTO «entity.name»(«FOR a:entity.foreignkey SEPARATOR ", "»«a.name»«ENDFOR») VALUES(«FOR a:entity.foreignkey SEPARATOR ", "»«IF a.type =="String"»'"+«a.name»+"'«ELSE»"+«a.name»+" «ENDIF»«ENDFOR»);");
	                rs2.close();
	                st.close();
	                //st2.close();
	                }
	            catch (java.sql.SQLException e) {
	                System.out.println(e.getMessage());
	            }
	        }
	    
		'''
	 
	
	
	
	def generateConstructor() '''
	public db (String Username, String Password) throws SQLException{
		this.username = Username;
		this.password = Password;
		
		try{
		Class.forName("org.postgresql.Driver");
		db = DriverManager.getConnection(url, Username, Password);
	 	}
		catch (java.lang.ClassNotFoundException e) {
	            System.out.println(e.getMessage());
	     }
	}
	 
	'''
	

	
	 
	
	
	def int generate(MathExp gen) {
		gen.exp.generateExp
	}
		
	def dispatch int generateExp(Expresion exp) { exp.exp1.generateExp }
	def dispatch int generateExp(Numbers exp) { exp.value }
	
	def dispatch int generateExp(Plus exp) { 
		exp.exp1.generateExp+exp.exp2.generateExp
	}
	def dispatch int generateExp(Minus exp) {
		exp.exp1.generateExp-exp.exp2.generateExp
	}
	
	def dispatch int generateExp(Mult exp) { 
		exp.exp1.generateExp*exp.exp2.generateExp
	}
	def dispatch int generateExp(Div exp) { 
		exp.exp1.generateExp/exp.exp2.generateExp
	}
	
	def dispatch int generateExp(Parenthesis exp) { exp.exp.generateExp }
	
	
		def display(EObject model) {
  		val res = new XMLResourceImpl
  		res.contents.add(EcoreUtil::copy(model))
  		System::out.println("Dump of model:")
  		res.save(System.out, null);
	}
}
