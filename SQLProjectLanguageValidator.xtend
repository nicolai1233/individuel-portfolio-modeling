/*
 * generated by Xtext 2.24.0
 */
package org.xtext.example.validation

import org.eclipse.xtext.validation.Check
import org.xtext.example.sQLProjectLanguage.Add
import org.xtext.example.sQLProjectLanguage.SQLProjectLanguagePackage.Literals
import org.xtext.example.sQLProjectLanguage.Remove
import org.xtext.example.sQLProjectLanguage.Select
import java.util.jar.Attributes
import org.xtext.example.sQLProjectLanguage.Attribute
import org.xtext.example.sQLProjectLanguage.SQLSystem
import java.util.ArrayList
import org.eclipse.xtext.xbase.controlflow.IEarlyExitComputer.ExitPoint

/** 
 * This class contains custom validation rules. 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class SQLProjectLanguageValidator extends AbstractSQLProjectLanguageValidator { //	public static final String INVALID_NAME = "invalidName";
	//
	// @Check
	// public void checkGreetingStartsWithCapital(Greeting greeting) {
	// if (!Character.isUpperCase(greeting.getName().charAt(0))) {
	// warning("Name should start with a capital",
	// SQLProjectLanguagePackage.Literals.GREETING__NAME,
	// INVALID_NAME);
	// }
	// }
	
	@Check
	def AddAttributesAndPrimeryKey(Add entity){
			for(i: 0 ..< entity.attributes.size){
				var count = 0;
				if(entity.attributes.get(i).type == 'int' && entity.attributes.get(i).str !== null){
					error('One of attributes does not hold true. requireStr is only for Strings',Literals.ADD__ATTRIBUTES)
				}
				if(entity.attributes.get(i).type == 'String' && entity.attributes.get(i).requirement1 !== null)
					error('One of attributes does not hold true. requireInt is only for int',Literals.ADD__ATTRIBUTES)
				
				for(k:0..<entity.attributes.size){
					if(entity.primeryKey != null){
						if(entity.primeryKey.name == entity.attributes.get(k).name){
							count = count +1 
						}
					}
				}
				
				for(j:0..<entity.attributes.size){
					if(entity.attributes.get(i).name == entity.attributes.get(j).name){
						count = count + 1
					}
				}
				if(count >= 2){
					error('more than one attribute have same name',Literals.ADD__ATTRIBUTES)
				}
				
				 
			}
			if(entity.primeryKey !== null){
				if(entity.primeryKey.type == 'int' && entity.primeryKey.str !== null){
					error('PrimeryKey does not hold true. requireStr is only for String',Literals.ADD__PRIMERY_KEY)
				}
				if(entity.primeryKey.type == 'String' && entity.primeryKey.requirement1 !== null){
					error('PrimeryKey does not hold true. requireInt is only for int',Literals.ADD__PRIMERY_KEY)
				}
			}
				
	}
	
	@Check
	def RemoveAttributes(Remove entity){
		for(i: 0 ..< entity.attributes.size){
			var count = 0;
				if(entity.attributes.get(i).type == 'int' && entity.attributes.get(i).str !== null){
					error('One of attributes does not hold true. requireStr is only for Strings',Literals.REMOVE__ATTRIBUTES)
				}
				if(entity.attributes.get(i).type == 'String' && entity.attributes.get(i).requirement1 !== null)
					error('One of attributes does not hold true. requireInt is only for int',Literals.REMOVE__ATTRIBUTES)
			
				for(j:0..<entity.attributes.size){
					if(entity.attributes.get(i).name == entity.attributes.get(j).name){
						count = count + 1
					}
				}
				if(count >= 2){
					error('more than one attribute have same name',Literals.REMOVE__ATTRIBUTES)
				}
			}
			
			
	}
	
	@Check
	def SelectAttributes(Select entity){
		for(i: 0 ..< entity.attributes.size){
			var count = 0;
				if(entity.attributes.get(i).type == 'int' && entity.attributes.get(i).str !== null){
					error('One of attributes does not hold true. requireStr is only for Strings',Literals.SELECT__ATTRIBUTES)
				}
				if(entity.attributes.get(i).type == 'String' && entity.attributes.get(i).requirement1 !== null)
					error('One of attributes does not hold true. requireInt is only for int',Literals.SELECT__ATTRIBUTES)
			
				for(j:0..<entity.attributes.size){
					if(entity.attributes.get(i).name == entity.attributes.get(j).name){
						count = count + 1
					}
				}
				if(count >= 2){
					error('more than one attribute have same name',Literals.SELECT__ATTRIBUTES)
				}
			}
	}
	
	
	
	def selectExist(Add entity ,Select sel ){
			if(entity.name == sel.table.table.name){		
			for(Attribute select : sel.attributes){
				var check = false
				for(Attribute add : entity.attributes){
					if(select.name == add.name){
						check = true
					}
					if(entity.primeryKey != null){
					if(entity.primeryKey.name == select.name){
						check = true
						}
					}
				}
				
				if(check == false){
					error(select.name+' in ' +sel.name + ' does not exit in '+entity.name+ ' add attribute to '+ entity.name +" or remove attribute from"+ sel.name ,Literals.SQL_SYSTEM__OPERATION)
				}
			}	
		
		}
	}
	
	
		def removeExist(Add entity ,Remove sel ){
			if(entity.name == sel.table.table.name){		
			for(Attribute select : sel.attributes){
				var check = false
				for(Attribute add : entity.attributes){
					if(select.name == add.name){
						check = true
					}
					if(entity.primeryKey != null){
					if(entity.primeryKey.name == select.name){
						check = true
						}
					}
				}
				
				if(check == false){
					error(select.name+' in ' +sel.name + ' does not exit in '+entity.name+ ' add attribute to '+ entity.name +" or remove attribute from"+ sel.name ,Literals.SQL_SYSTEM__OPERATION)
				}
			}	
		
		}
	}
	
	
	@Check
	def addRemoveSelect(SQLSystem teset){
		val addList = new ArrayList<Add> 
		addList.addAll(teset.operation.filter(Add))
		
		val selectList = new ArrayList<Select> 
		selectList.addAll(teset.operation.filter(Select))
		
		val removeList = new ArrayList<Remove> 
		removeList.addAll(teset.operation.filter(Remove))
		
		
		for(Select sel : selectList){
			for(Add add : addList)
			selectExist(add,sel)
		}
		
		for(Remove rem : removeList){
			for(Add add: addList){
				removeExist(add,rem)
			}
		}
		
				
	}
	
	
	
	
	
}








